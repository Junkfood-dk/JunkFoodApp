// Mocks generated by Mockito 5.4.4 from annotations
// in userapp/test/acknowledge_rating_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:userapp/ui/controllers/dish_rating_controller.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DishRatingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockDishRatingController extends _i1.Mock
    implements _i3.DishRatingController {
  @override
  set prefs(_i4.SharedPreferences? _prefs) => super.noSuchMethod(
        Invocation.setter(
          #prefs,
          _prefs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<_i4.SharedPreferences?> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_0<_i4.SharedPreferences?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub:
            _FakeAutoDisposeAsyncNotifierProviderRef_0<_i4.SharedPreferences?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<_i4.SharedPreferences?>);

  @override
  _i2.AsyncValue<_i4.SharedPreferences?> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<_i4.SharedPreferences?>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAsyncValue_1<_i4.SharedPreferences?>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i4.SharedPreferences?>);

  @override
  set state(_i2.AsyncValue<_i4.SharedPreferences?>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i4.SharedPreferences?> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i5.Future<_i4.SharedPreferences?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.SharedPreferences?>.value(),
      ) as _i5.Future<_i4.SharedPreferences?>);

  @override
  _i5.Future<_i4.SharedPreferences?> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i5.Future<_i4.SharedPreferences?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.SharedPreferences?>.value(),
      ) as _i5.Future<_i4.SharedPreferences?>);

  @override
  _i5.Future<List<String>?> getRatingFromDay(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatingFromDay,
          [date],
        ),
        returnValue: _i5.Future<List<String>?>.value(),
        returnValueForMissingStub: _i5.Future<List<String>?>.value(),
      ) as _i5.Future<List<String>?>);

  @override
  _i5.Future<bool> isRatingForDishDifferent(
    int? dishId,
    int? rating,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isRatingForDishDifferent,
          [
            dishId,
            rating,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void saveRatingsForDay(
    List<String>? ratingList,
    DateTime? date,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveRatingsForDay,
          [
            ratingList,
            date,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUserRating(
    int? dishId,
    int? rating,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserRating,
          [
            dishId,
            rating,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i4.SharedPreferences?> update(
    _i5.FutureOr<_i4.SharedPreferences?> Function(_i4.SharedPreferences?)? cb, {
    _i5.FutureOr<_i4.SharedPreferences?> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i5.Future<_i4.SharedPreferences?>.value(),
        returnValueForMissingStub: _i5.Future<_i4.SharedPreferences?>.value(),
      ) as _i5.Future<_i4.SharedPreferences?>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i4.SharedPreferences?>? previous,
    _i2.AsyncValue<_i4.SharedPreferences?>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
